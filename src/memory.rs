use iced::futures::io;
use std::fs;

const STACK_SIZE: usize = 16;
const RAM_SIZE: usize = 4096;

const FONT_SET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

pub struct Memory {
    pub stack: [u16; STACK_SIZE],
    pub ram: [u8; RAM_SIZE],
}

impl Memory {
    pub fn new() -> Self {
        let mut tmp = Self {
            stack: [0; STACK_SIZE],
            ram: [0; RAM_SIZE],
        };

        //
        tmp.ram[0..FONT_SET.len()].copy_from_slice(&FONT_SET);

        tmp
    }

    pub fn reset(&mut self) {
        self.stack = [0; STACK_SIZE];
        self.ram = [0; RAM_SIZE];
    }

    pub fn load_rom(&mut self, filepath: &str) -> io::Result<()> {
        let rom = fs::read(filepath)?;
        self.ram[0x200..(rom.len() + 0x200)].copy_from_slice(&rom);

        Ok(())
    }
}
